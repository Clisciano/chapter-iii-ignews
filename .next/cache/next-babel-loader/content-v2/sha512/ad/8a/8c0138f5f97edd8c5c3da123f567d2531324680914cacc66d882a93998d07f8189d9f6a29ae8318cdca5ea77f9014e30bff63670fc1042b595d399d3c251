{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { query as q } from 'faunadb';\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { fauna } from '../../../services/fauna';\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [Providers.GitHub({\n    clientId: process.env.GITHUB_CLIENT_ID,\n    clientSecret: process.env.GITHUB_CLIENT_SECRET,\n    scope: 'read:user'\n  })],\n  callbacks: {\n    async session(session) {\n      try {\n        const userActiveSubscription = await fauna.query(q.Get(q.Intersection([q.Match(q.Index('subscription_by_user_id'), q.Select(\"ref\", q.Get(q.Match(q.Index('user_by_email'), q.Casefold(session.user.email))))), q.Match(q.Index('subscription_by_status'), \"active\")])));\n        return _objectSpread(_objectSpread({}, session), {}, {\n          activeSubscription: userActiveSubscription\n        });\n      } catch {\n        return _objectSpread(_objectSpread({}, session), {}, {\n          activeSubscription: null\n        });\n      }\n    },\n\n    async signIn(user, account, profile) {\n      const {\n        email\n      } = user;\n\n      try {\n        await fauna.query(q.If(q.Not(q.Exists(q.Match(q.Index('user_by_email'), q.Casefold(user.email)))), q.Create(q.Collection('users'), {\n          data: {\n            email\n          }\n        }), q.Get(q.Match(q.Index('user_by_email'), q.Casefold(user.email)))));\n        return true;\n      } catch {\n        return false;\n      }\n\n      return true;\n    }\n\n  }\n});","map":{"version":3,"sources":["/Users/citelsistema/Desktop/ignite-aulas/Reactjs/Chapter03/ignews/src/pages/api/auth/[...nextauth].ts"],"names":["query","q","NextAuth","Providers","fauna","providers","GitHub","clientId","process","env","GITHUB_CLIENT_ID","clientSecret","GITHUB_CLIENT_SECRET","scope","callbacks","session","userActiveSubscription","Get","Intersection","Match","Index","Select","Casefold","user","email","activeSubscription","signIn","account","profile","If","Not","Exists","Create","Collection","data"],"mappings":";;;;;;AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AAEA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,eAAeF,QAAQ,CAAC;AACtB;AACAG,EAAAA,SAAS,EAAE,CACTF,SAAS,CAACG,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADP;AAEfC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFX;AAGfC,IAAAA,KAAK,EAAE;AAHQ,GAAjB,CADS,CAFW;AAStBC,EAAAA,SAAS,EAAE;AACT,UAAMC,OAAN,CAAcA,OAAd,EAAuB;AACtB,UAAI;AACC,cAAMC,sBAAsB,GAAG,MAAMZ,KAAK,CAACJ,KAAN,CACrCC,CAAC,CAACgB,GAAF,CACEhB,CAAC,CAACiB,YAAF,CAAe,CACbjB,CAAC,CAACkB,KAAF,CACElB,CAAC,CAACmB,KAAF,CAAQ,yBAAR,CADF,EAEEnB,CAAC,CAACoB,MAAF,CACE,KADF,EAEEpB,CAAC,CAACgB,GAAF,CACEhB,CAAC,CAACkB,KAAF,CACElB,CAAC,CAACmB,KAAF,CAAQ,eAAR,CADF,EAEEnB,CAAC,CAACqB,QAAF,CAAWP,OAAO,CAACQ,IAAR,CAAaC,KAAxB,CAFF,CADF,CAFF,CAFF,CADa,EAabvB,CAAC,CAACkB,KAAF,CACElB,CAAC,CAACmB,KAAF,CAAQ,wBAAR,CADF,EAEE,QAFF,CAba,CAAf,CADF,CADqC,CAArC;AAuBF,+CACKL,OADL;AAEEU,UAAAA,kBAAkB,EAAET;AAFtB;AAID,OA5BF,CA4BE,MAAM;AACL,+CACKD,OADL;AAEEU,UAAAA,kBAAkB,EAAE;AAFtB;AAID;AACF,KApCQ;;AAsCT,UAAMC,MAAN,CAAaH,IAAb,EAAmBI,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,YAAM;AAAEJ,QAAAA;AAAF,UAAYD,IAAlB;;AAEA,UAAI;AACF,cAAMnB,KAAK,CAACJ,KAAN,CACJC,CAAC,CAAC4B,EAAF,CACE5B,CAAC,CAAC6B,GAAF,CACE7B,CAAC,CAAC8B,MAAF,CACE9B,CAAC,CAACkB,KAAF,CACElB,CAAC,CAACmB,KAAF,CAAQ,eAAR,CADF,EAEEnB,CAAC,CAACqB,QAAF,CAAWC,IAAI,CAACC,KAAhB,CAFF,CADF,CADF,CADF,EASEvB,CAAC,CAAC+B,MAAF,CACE/B,CAAC,CAACgC,UAAF,CAAa,OAAb,CADF,EAEE;AAAEC,UAAAA,IAAI,EAAE;AAAEV,YAAAA;AAAF;AAAR,SAFF,CATF,EAaEvB,CAAC,CAACgB,GAAF,CACEhB,CAAC,CAACkB,KAAF,CACElB,CAAC,CAACmB,KAAF,CAAQ,eAAR,CADF,EAEEnB,CAAC,CAACqB,QAAF,CAAWC,IAAI,CAACC,KAAhB,CAFF,CADF,CAbF,CADI,CAAN;AAsBA,eAAO,IAAP;AACD,OAxBD,CAwBC,MAAM;AACL,eAAO,KAAP;AACD;;AAID,aAAO,IAAP;AACD;;AAxEQ;AATW,CAAD,CAAvB","sourcesContent":["import { query as q } from 'faunadb'\n\nimport NextAuth from 'next-auth'\nimport { session } from 'next-auth/client'\nimport Providers from 'next-auth/providers'\n\nimport { fauna } from '../../../services/fauna'\n\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [\n    Providers.GitHub({\n      clientId: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n      scope: 'read:user'\n    }),    \n  ],\n  callbacks: {\n    async session(session) {\n     try {\n          const userActiveSubscription = await fauna.query(\n          q.Get(\n            q.Intersection([\n              q.Match(\n                q.Index('subscription_by_user_id'),\n                q.Select(\n                  \"ref\",\n                  q.Get(\n                    q.Match(\n                      q.Index('user_by_email'),\n                      q.Casefold(session.user.email)\n                    )\n                  )\n                )\n              ),\n              q.Match(\n                q.Index('subscription_by_status'),\n                \"active\"\n              )\n            ])\n          )\n        )\n        \n        return {\n          ...session,\n          activeSubscription: userActiveSubscription\n        }\n      }catch {\n        return {\n          ...session,\n          activeSubscription: null,\n        }\n      }\n    },\n\n    async signIn(user, account, profile) {\n      const { email } = user\n\n      try {\n        await fauna.query(\n          q.If(\n            q.Not(\n              q.Exists(\n                q.Match(\n                  q.Index('user_by_email'),\n                  q.Casefold(user.email)\n                )                \n              )\n            ),\n            q.Create(\n              q.Collection('users'),\n              { data: { email } }\n            ),\n            q.Get(\n              q.Match(\n                q.Index('user_by_email'),\n                q.Casefold(user.email)\n              )\n            )\n          )\n        )\n        return true\n      }catch {\n        return false\n      }\n      \n      \n\n      return true\n    },\n  }  \n})"]},"metadata":{},"sourceType":"module"}