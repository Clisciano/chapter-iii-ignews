{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/citelsistema/Desktop/ignite-aulas/Reactjs/Chapter03/ignews/src/pages/posts/preview/[slug].tsx\";\nimport { useRouter, useSession } from \"next-auth/client\";\nimport { RichText } from \"prismic-dom\";\nimport { getPrismicClient } from \"../../../services/prismic\";\nimport Link from 'next/link';\nimport { parseISO, format } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\nimport Head from \"next/head\";\nimport styles from '../post.module.scss';\nexport default function PostPreview({\n  post\n}) {\n  const [session] = useSession();\n  const router = useRouter();\n  useSession(session);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: [post.title, \" | Ignews\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"article\", {\n        className: styles.post,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"time\", {\n          children: post.updatedAt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.postContent} ${styles.previewContent}`,\n          dangerouslySetInnerHTML: {\n            __html: post.content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.continueReadings,\n          children: [\"Wanna continue reading?\", /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"\",\n              children: \" Subscribe now \\uD83E\\uDD17\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\nexport const getStaticPaths = () => {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    slug\n  } = params;\n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post', String(slug), {});\n  const post = {\n    slug,\n    title: RichText.asText(response.data.title),\n    content: RichText.asHtml(response.data.content.splice(0, 3)),\n    pdatedAt: format(parseISO(response.last_publication_date), \"dd 'de' MMMM 'de' yyyy\", {\n      locale: pt\n    })\n  };\n  return {\n    props: {\n      post\n    }\n  };\n};","map":{"version":3,"sources":["/Users/citelsistema/Desktop/ignite-aulas/Reactjs/Chapter03/ignews/src/pages/posts/preview/[slug].tsx"],"names":["useRouter","useSession","RichText","getPrismicClient","Link","parseISO","format","pt","Head","styles","PostPreview","post","session","router","title","container","updatedAt","postContent","previewContent","__html","content","continueReadings","getStaticPaths","paths","fallback","getStaticProps","params","slug","prismic","response","getByUID","String","asText","data","asHtml","splice","pdatedAt","last_publication_date","locale","props"],"mappings":"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","sourcesContent":["import { GetStaticProps } from \"next\";\nimport { useRouter ,useSession } from \"next-auth/client\";\nimport { RichText } from \"prismic-dom\";\nimport { getPrismicClient } from \"../../../services/prismic\";\n\nimport Link from 'next/link';\n\nimport { parseISO, format } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\nimport Head from \"next/head\";\n\nimport styles from '../post.module.scss'\n\ninterface PostPreviewProps {\n  post: {\n    slug: string;\n    title: string;\n    content: string;\n    updatedAt: string;\n  }  \n}\n\nexport default function PostPreview( { post }: PostPreviewProps) {\n  const [ session ] = useSession();\n  const router = useRouter();\n\n  useSession(session)\n  \n  return(\n    <>\n    <Head>\n      <title>{post.title} | Ignews</title>      \n    </Head>\n\n    <main className={styles.container}>\n      <article className={styles.post}>\n        <h1>{post.title}</h1>\n        <time>{post.updatedAt}</time>\n        <div \n          className={`${styles.postContent} ${styles.previewContent}`}\n          dangerouslySetInnerHTML={{ __html: post.content }}\n        />\n        <div className={styles.continueReadings}>\n          Wanna continue reading?\n          <Link href=\"/\">\n            <a href=\"\"> Subscribe now ðŸ¤—</a>\n          </Link>\n        </div>\n      </article>\n    </main>\n    </>\n  );\n}\n\nexport const getStaticPaths = () => {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  }\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  \n  const { slug } = params; \n\n  const prismic = getPrismicClient();\n\n  const response = await prismic.getByUID('post', String(slug), {})\n\n  const post = {\n    slug,\n    title: RichText.asText(response.data.title),\n    content: RichText.asHtml(response.data.content.splice(0, 3)),\n    pdatedAt: format(\n      parseISO(response.last_publication_date), \n      \"dd 'de' MMMM 'de' yyyy\", \n      { locale: pt }\n    ) \n  };\n\n  return {\n    props: {\n      post\n    },\n  }\n\n}"]},"metadata":{},"sourceType":"module"}