{"ast":null,"code":"import { query as q } from 'faunadb';\nimport { getSession } from 'next-auth/client';\nimport { stripe } from '../../services/stripe';\nimport { fauna } from '../../services/fauna';\nexport default (async (req, res) => {\n  if (req.method === 'POST') {\n    const session = await getSession({\n      req\n    });\n    const user = await fauna.query(q.Get(q.Match(q.Index('user_by_email'), q.Casefold(session.user.email))));\n    let customerId = user.data.stripe_customer_id;\n\n    if (!customerId) {\n      const stripeCustomer = await stripe.customers.create({\n        email: session.user.email // metadata\n\n      });\n      await fauna.query(q.Update(q.Ref(q.Collection('users'), user.ref.id), {\n        data: {\n          stripe_customer_id: stripeCustomer.id\n        }\n      }));\n      customerId = stripeCustomer.id;\n    }\n\n    const stripeCheckoutSession = await stripe.checkout.sessions.create({\n      customer: customerId,\n      payment_method_types: ['card'],\n      billing_address_collection: 'required',\n      line_items: [{\n        price: 'price_1IaM7cL29EXkrxBnIx9wnRuK',\n        quantity: 1\n      }],\n      mode: 'subscription',\n      allow_promotion_codes: true,\n      success_url: process.env.STRIPE_SUCCESS_URL,\n      cancel_url: process.env.STRIPE_CANCEL_URL\n    });\n    return res.status(200).json({\n      sessionId: stripeCheckoutSession.id\n    });\n  } else {\n    res.setHeader('Allow', 'POST');\n    res.status(405).end('Method not allowed');\n  }\n});","map":{"version":3,"sources":["/Users/citelsistema/Desktop/ignite-aulas/Reactjs/Chapter03/ignews/src/pages/api/subscribe.ts"],"names":["query","q","getSession","stripe","fauna","req","res","method","session","user","Get","Match","Index","Casefold","email","customerId","data","stripe_customer_id","stripeCustomer","customers","create","Update","Ref","Collection","ref","id","stripeCheckoutSession","checkout","sessions","customer","payment_method_types","billing_address_collection","line_items","price","quantity","mode","allow_promotion_codes","success_url","process","env","STRIPE_SUCCESS_URL","cancel_url","STRIPE_CANCEL_URL","status","json","sessionId","setHeader","end"],"mappings":"AACA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,KAAT,QAAsB,sBAAtB;AAYA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAMC,OAAO,GAAG,MAAMN,UAAU,CAAC;AAAEG,MAAAA;AAAF,KAAD,CAAhC;AAEA,UAAMI,IAAI,GAAG,MAAML,KAAK,CAACJ,KAAN,CACjBC,CAAC,CAACS,GAAF,CACET,CAAC,CAACU,KAAF,CACEV,CAAC,CAACW,KAAF,CAAQ,eAAR,CADF,EAEEX,CAAC,CAACY,QAAF,CAAWL,OAAO,CAACC,IAAR,CAAaK,KAAxB,CAFF,CADF,CADiB,CAAnB;AASA,QAAIC,UAAU,GAAGN,IAAI,CAACO,IAAL,CAAUC,kBAA3B;;AAEA,QAAI,CAACF,UAAL,EAAiB;AACf,YAAMG,cAAc,GAAG,MAAMf,MAAM,CAACgB,SAAP,CAAiBC,MAAjB,CAAwB;AACnDN,QAAAA,KAAK,EAAEN,OAAO,CAACC,IAAR,CAAaK,KAD+B,CAEnD;;AAFmD,OAAxB,CAA7B;AAKA,YAAMV,KAAK,CAACJ,KAAN,CACJC,CAAC,CAACoB,MAAF,CACEpB,CAAC,CAACqB,GAAF,CAAMrB,CAAC,CAACsB,UAAF,CAAa,OAAb,CAAN,EAA6Bd,IAAI,CAACe,GAAL,CAASC,EAAtC,CADF,EAEE;AACET,QAAAA,IAAI,EAAE;AACJC,UAAAA,kBAAkB,EAAEC,cAAc,CAACO;AAD/B;AADR,OAFF,CADI,CAAN;AAUEV,MAAAA,UAAU,GAAGG,cAAc,CAACO,EAA5B;AACH;;AAGD,UAAMC,qBAAqB,GAAG,MAAMvB,MAAM,CAACwB,QAAP,CAAgBC,QAAhB,CAAyBR,MAAzB,CAAgC;AAClES,MAAAA,QAAQ,EAAEd,UADwD;AAElEe,MAAAA,oBAAoB,EAAE,CAAC,MAAD,CAF4C;AAGlEC,MAAAA,0BAA0B,EAAE,UAHsC;AAIlEC,MAAAA,UAAU,EAAE,CACV;AAAEC,QAAAA,KAAK,EAAE,gCAAT;AAA2CC,QAAAA,QAAQ,EAAE;AAArD,OADU,CAJsD;AAOlEC,MAAAA,IAAI,EAAE,cAP4D;AAQlEC,MAAAA,qBAAqB,EAAE,IAR2C;AASlEC,MAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBATyC;AAUlEC,MAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAV0C,KAAhC,CAApC;AAaA,WAAOpC,GAAG,CAACqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,SAAS,EAAEnB,qBAAqB,CAACD;AAAnC,KAArB,CAAP;AAED,GAjDD,MAiDO;AACLnB,IAAAA,GAAG,CAACwC,SAAJ,CAAc,OAAd,EAAuB,MAAvB;AACAxC,IAAAA,GAAG,CAACqC,MAAJ,CAAW,GAAX,EAAgBI,GAAhB,CAAoB,oBAApB;AACD;AACF,CAtDD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport { query as q } from 'faunadb';\nimport { getSession } from 'next-auth/client'\nimport { stripe } from '../../services/stripe'\nimport { fauna } from '../../services/fauna';\n\n\ntype User = {\n  ref: {\n    id: string;\n  },\n  data: {\n    stripe_customer_id: string;\n  }\n}\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  if (req.method === 'POST') {\n    const session = await getSession({ req });\n\n    const user = await fauna.query<User>(\n      q.Get(\n        q.Match(\n          q.Index('user_by_email'),\n          q.Casefold(session.user.email)\n        )\n      )\n    )\n\n    let customerId = user.data.stripe_customer_id;\n\n    if (!customerId) {\n      const stripeCustomer = await stripe.customers.create({\n        email: session.user.email,\n        // metadata\n      })\n  \n      await fauna.query(\n        q.Update(\n          q.Ref(q.Collection('users'), user.ref.id),\n          {\n            data: {\n              stripe_customer_id: stripeCustomer.id\n            }\n          }\n        )\n      )\n        customerId = stripeCustomer.id;\n    }\n    \n    \n    const stripeCheckoutSession = await stripe.checkout.sessions.create({\n      customer: customerId,\n      payment_method_types: ['card'],\n      billing_address_collection: 'required',\n      line_items: [\n        { price: 'price_1IaM7cL29EXkrxBnIx9wnRuK', quantity: 1}\n      ],\n      mode: 'subscription',\n      allow_promotion_codes: true,\n      success_url: process.env.STRIPE_SUCCESS_URL,\n      cancel_url: process.env.STRIPE_CANCEL_URL     \n    })\n\n    return res.status(200).json({ sessionId: stripeCheckoutSession.id })\n\n  } else {\n    res.setHeader('Allow', 'POST')\n    res.status(405).end('Method not allowed')\n  }\n}"]},"metadata":{},"sourceType":"module"}