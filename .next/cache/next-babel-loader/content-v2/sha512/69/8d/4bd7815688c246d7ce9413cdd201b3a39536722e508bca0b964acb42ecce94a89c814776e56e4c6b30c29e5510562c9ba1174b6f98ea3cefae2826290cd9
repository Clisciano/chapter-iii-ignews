{"ast":null,"code":"import { query as q } from 'faunadb';\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { fauna } from '../../../services/fauna';\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [Providers.GitHub({\n    clientId: process.env.GITHUB_CLIENT_ID,\n    clientSecret: process.env.GITHUB_CLIENT_SECRET,\n    scope: 'read:user'\n  })],\n  callbacks: {\n    async signIn(user, account, profile) {\n      const {\n        email\n      } = user;\n      await fauna.query(q.Create(q.Collection('users'), {\n        data: {\n          email\n        }\n      }));\n      return true;\n    }\n\n  }\n});","map":{"version":3,"sources":["/Users/citelsistema/Desktop/ignite-aulas/Reactjs/Chapter03/ignews/src/pages/api/auth/[...nextauth].ts"],"names":["query","q","NextAuth","Providers","fauna","providers","GitHub","clientId","process","env","GITHUB_CLIENT_ID","clientSecret","GITHUB_CLIENT_SECRET","scope","callbacks","signIn","user","account","profile","email","Create","Collection","data"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AAEA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,eAAeF,QAAQ,CAAC;AACtB;AACAG,EAAAA,SAAS,EAAE,CACTF,SAAS,CAACG,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADP;AAEfC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFX;AAGfC,IAAAA,KAAK,EAAE;AAHQ,GAAjB,CADS,CAFW;AAStBC,EAAAA,SAAS,EAAE;AACT,UAAMC,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,YAAM;AAAEC,QAAAA;AAAF,UAAYH,IAAlB;AAEA,YAAMZ,KAAK,CAACJ,KAAN,CACJC,CAAC,CAACmB,MAAF,CACEnB,CAAC,CAACoB,UAAF,CAAa,OAAb,CADF,EAEE;AAAEC,QAAAA,IAAI,EAAE;AAAEH,UAAAA;AAAF;AAAR,OAFF,CADI,CAAN;AAOA,aAAO,IAAP;AACD;;AAZQ;AATW,CAAD,CAAvB","sourcesContent":["import { query as q } from 'faunadb'\n\nimport NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\n\nimport { fauna } from '../../../services/fauna'\n\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [\n    Providers.GitHub({\n      clientId: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n      scope: 'read:user'\n    }),    \n  ],\n  callbacks: {\n    async signIn(user, account, profile) {\n      const { email } = user\n      \n      await fauna.query(\n        q.Create(\n          q.Collection('users'),\n          { data: { email } }\n        )\n      )\n\n      return true\n    },\n  }  \n})"]},"metadata":{},"sourceType":"module"}