{"ast":null,"code":"import { query as q } from 'faunadb';\nimport { fauna } from \"../../../services/fauna\";\nimport { stripe } from '../../../services/stripe';\nexport async function saveSubscription(subscriptionId, customerId, createAtion = false) {\n  const userRef = await fauna.query(q.Select(\"ref\", q.Get(q.Match(q.Index('user_by_stripe_customer_id'), customerId))));\n  const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n  const subscriptionData = {\n    id: subscription.id,\n    userId: userRef,\n    status: subscription.status,\n    price_id: subscription.items.data[0].price.id\n  };\n\n  if (createAtion) {\n    await fauna.query(q.Create(q.Collection('subscriptions'), {\n      data: subscriptionData\n    }));\n  } else {\n    await fauna.query(q.Replace(q.Select(\"ref\", q.Match(q.Index('subscription_by_id'), subscriptionId)), {\n      data: subscriptionData\n    }));\n  }\n}","map":{"version":3,"sources":["/Users/citelsistema/Desktop/ignite-aulas/Reactjs/Chapter03/ignews/src/pages/api/_lib/manageSubscription.ts"],"names":["query","q","fauna","stripe","saveSubscription","subscriptionId","customerId","createAtion","userRef","Select","Get","Match","Index","subscription","subscriptions","retrieve","subscriptionData","id","userId","status","price_id","items","data","price","Create","Collection","Replace"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AACA,SAASC,KAAT,QAAsB,yBAAtB;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAEA,OAAO,eAAeC,gBAAf,CACLC,cADK,EAELC,UAFK,EAGLC,WAAW,GAAG,KAHT,EAIL;AAEA,QAAMC,OAAO,GAAG,MAAMN,KAAK,CAACF,KAAN,CACpBC,CAAC,CAACQ,MAAF,CACE,KADF,EAEER,CAAC,CAACS,GAAF,CACET,CAAC,CAACU,KAAF,CACEV,CAAC,CAACW,KAAF,CAAQ,4BAAR,CADF,EAEEN,UAFF,CADF,CAFF,CADoB,CAAtB;AAYA,QAAMO,YAAY,GAAG,MAAMV,MAAM,CAACW,aAAP,CAAqBC,QAArB,CAA8BV,cAA9B,CAA3B;AAEA,QAAMW,gBAAgB,GAAG;AACvBC,IAAAA,EAAE,EAAEJ,YAAY,CAACI,EADM;AAEvBC,IAAAA,MAAM,EAAEV,OAFe;AAGvBW,IAAAA,MAAM,EAAEN,YAAY,CAACM,MAHE;AAIvBC,IAAAA,QAAQ,EAAEP,YAAY,CAACQ,KAAb,CAAmBC,IAAnB,CAAwB,CAAxB,EAA2BC,KAA3B,CAAiCN;AAJpB,GAAzB;;AAOA,MAAIV,WAAJ,EAAiB;AACf,UAAML,KAAK,CAACF,KAAN,CACJC,CAAC,CAACuB,MAAF,CACEvB,CAAC,CAACwB,UAAF,CAAa,eAAb,CADF,EAEE;AAAEH,MAAAA,IAAI,EAAEN;AAAR,KAFF,CADI,CAAN;AAMD,GAPD,MAOO;AACL,UAAMd,KAAK,CAACF,KAAN,CACJC,CAAC,CAACyB,OAAF,CACEzB,CAAC,CAACQ,MAAF,CACE,KADF,EAEER,CAAC,CAACU,KAAF,CACEV,CAAC,CAACW,KAAF,CAAQ,oBAAR,CADF,EAEEP,cAFF,CAFF,CADF,EAQE;AAAEiB,MAAAA,IAAI,EAAEN;AAAR,KARF,CADI,CAAN;AAYD;AAEF","sourcesContent":["import { query as q } from 'faunadb'\nimport { fauna } from \"../../../services/fauna\";\nimport { stripe } from '../../../services/stripe';\n\nexport async function saveSubscription(\n  subscriptionId: string,\n  customerId: string,\n  createAtion = false,\n) {\n  \n  const userRef = await fauna.query(\n    q.Select(\n      \"ref\",\n      q.Get(\n        q.Match(\n          q.Index('user_by_stripe_customer_id'),\n          customerId\n        )\n      )\n    )\n  )\n\n  const subscription = await stripe.subscriptions.retrieve(subscriptionId)\n\n  const subscriptionData = {\n    id: subscription.id,\n    userId: userRef,\n    status: subscription.status,\n    price_id: subscription.items.data[0].price.id,\n  }\n\n  if (createAtion) {\n    await fauna.query(\n      q.Create(\n        q.Collection('subscriptions'),\n        { data: subscriptionData }\n      )\n    )\n  } else {\n    await fauna.query(\n      q.Replace(\n        q.Select(\n          \"ref\",\n          q.Match(\n            q.Index('subscription_by_id'),\n            subscriptionId,\n          )\n        ),\n        { data: subscriptionData }\n      )\n    )\n  }\n\n}"]},"metadata":{},"sourceType":"module"}